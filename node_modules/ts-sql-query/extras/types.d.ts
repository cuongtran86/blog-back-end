import type { MandatoryInsertSets, MandatoryInsertValues, OnConflictUpdateSets, OnConflictUpdateValues } from "../expressions/insert";
import type { UpdateSets, UpdateValues } from "../expressions/update";
import type { ITable, ITableOrView, OuterJoinSource, TABLE_OR_VIEW_ALIAS } from "../utils/ITableOrView";
import type { ResultObjectValues } from "../utils/resultUtils";
import type { Column, ComputedColumn } from "../utils/Column";
import type { AnyValueSource } from "../expressions/values";
import type { OuterJoinSourceOf, TableOrViewWithRef } from "../utils/tableOrViewUtils";
import type { outerJoinAlias, tableOrViewRef } from "../utils/symbols";
export declare type SelectedRow<TABLE> = ResultObjectValues<{
    [K in ColumnKeys<TABLE> & keyof TABLE]: TABLE[K];
}>;
export declare type SelectedValues<TABLE> = ResultObjectValues<{
    [K in ColumnKeys<TABLE>]: TABLE[K];
}>;
export declare type InsertableRow<TABLE> = TABLE extends ITable<any> ? MakeTypeVisible<MandatoryInsertSets<TABLE>> : MakeTypeVisible<MandatoryInsertSets<TABLE & ITable<any>>>;
export declare type InsertableValues<TABLE> = TABLE extends ITable<any> ? MakeTypeVisible<MandatoryInsertValues<TABLE>> : MakeTypeVisible<MandatoryInsertValues<TABLE & ITable<any>>>;
export declare type UpdatableOnInsertConflictRow<TABLE> = TABLE extends ITable<any> ? MakeTypeVisible<OnConflictUpdateSets<TABLE>> : MakeTypeVisible<OnConflictUpdateSets<TABLE & ITable<any>>>;
export declare type UpdatableOnInsertConflictValues<TABLE> = TABLE extends ITable<any> ? MakeTypeVisible<OnConflictUpdateValues<TABLE>> : MakeTypeVisible<OnConflictUpdateValues<TABLE & ITable<any>>>;
export declare type UpdatableRow<TABLE> = TABLE extends ITable<any> ? MakeTypeVisible<UpdateSets<TABLE, TABLE, undefined>> : MakeTypeVisible<UpdateSets<TABLE & ITable<any>, TABLE & ITable<any>, undefined>>;
export declare type UpdatableValues<TABLE> = TABLE extends ITable<any> ? MakeTypeVisible<UpdateValues<TABLE, undefined>> : MakeTypeVisible<UpdateValues<TABLE & ITable<any>, undefined>>;
export declare type UpdatableRowShapedAs<SHAPE> = MakeTypeVisible<UpdateSets<ITable<any>, ITable<any>, SHAPE>>;
export declare type UpdatableValuesShapedAs<SHAPE> = MakeTypeVisible<UpdateValues<ITable<any>, SHAPE>>;
declare type MakeTypeVisible<T> = {
    [P in keyof T]: T[P];
};
export declare type ColumnKeys<O> = {
    [K in keyof O]-?: K extends string ? (O[K] extends AnyValueSource ? K : never) : never;
}[keyof O];
export declare type WritableColumnKeys<O> = {
    [K in keyof O]-?: K extends string ? (O[K] extends Column ? (O[K] extends ComputedColumn ? never : K) : never) : never;
}[keyof O];
export declare type TableOrViewOf<TABLE_OR_VIEW extends ITableOrView<any>, ALIAS extends string = ''> = ALIAS extends false ? ITableOrView<TABLE_OR_VIEW[typeof tableOrViewRef] | TABLE_OR_VIEW_ALIAS<TABLE_OR_VIEW[typeof tableOrViewRef], ALIAS>> : ALIAS extends '' ? ITableOrView<TABLE_OR_VIEW[typeof tableOrViewRef]> : ITableOrView<TABLE_OR_VIEW_ALIAS<TABLE_OR_VIEW[typeof tableOrViewRef], ALIAS>>;
export declare type TableOrViewLeftJoinOf<TABLE_OR_VIEW extends ITableOrView<any>, ALIAS extends string = ''> = OuterJoinSource<TABLE_OR_VIEW, ALIAS>;
export declare function fromRef<TABLE_OR_VIEW extends ITableOrView<any>, REF extends TableOrViewOf<TABLE_OR_VIEW[typeof tableOrViewRef], any>>(tableOrView: TABLE_OR_VIEW, ref: REF): TableOrViewWithRef<TABLE_OR_VIEW, REF[typeof tableOrViewRef]>;
export declare function fromRef<TABLE_OR_VIEW extends ITableOrView<any>, REF extends TableOrViewLeftJoinOf<TABLE_OR_VIEW, any>>(tableOrView: TABLE_OR_VIEW, ref: REF): OuterJoinSourceOf<TABLE_OR_VIEW, REF[typeof outerJoinAlias]>;
export declare function fromRef<TABLE_OR_VIEW extends ITableOrView<any>, REF extends TableOrViewOf<TABLE_OR_VIEW[typeof tableOrViewRef], any>>(tableOrView: new (...params: any[]) => TABLE_OR_VIEW, ref: REF): TableOrViewWithRef<TABLE_OR_VIEW, REF[typeof tableOrViewRef]>;
export declare function fromRef<TABLE_OR_VIEW extends ITableOrView<any>, REF extends TableOrViewLeftJoinOf<TABLE_OR_VIEW, any>>(tableOrView: new (...params: any[]) => TABLE_OR_VIEW, ref: REF): OuterJoinSourceOf<TABLE_OR_VIEW, REF[typeof outerJoinAlias]>;
export {};
