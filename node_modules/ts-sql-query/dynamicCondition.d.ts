import { AnyValueSource } from './expressions/values';
import type { SelectedValues } from './extras/types';
import type { MandatoryPropertiesOf } from './utils/resultUtils';
export type { DynamicCondition, TypeSafeDynamicCondition } from './expressions/dynamicConditionUsingFilters';
export declare type Pickable = {
    [key in string]?: AnyValueSource | Pickable;
};
export declare type DynamicPick<TYPE extends Pickable, MANDATORY extends MandatoryPaths<TYPE, ''> = never> = InternalDynamicPick<TYPE, MANDATORY, ''>;
declare type InternalDynamicPick<TYPE, MANDATORY extends string, PREFIX extends string> = Omit<{
    [P in (keyof TYPE) & string]?: TYPE[P] extends AnyValueSource | undefined ? boolean : InternalDynamicPick<TYPE[P], MANDATORY, `${PREFIX}.${P}`> | boolean;
}, MadatoriesInType<TYPE, MANDATORY, PREFIX>>;
declare type PickWithMandatories<TYPE, MANDATORY extends string, PREFIX extends string> = Expand<{
    [P in OptionalValueSourcesInType<TYPE, MANDATORY, PREFIX>]?: TYPE[P];
} & {
    [P in NonValueSourcesInType<TYPE, MANDATORY, PREFIX>]: PREFIX extends '' ? PickWithMandatories<TYPE[P], MANDATORY, `${P}`> : PickWithMandatories<TYPE[P], MANDATORY, `${PREFIX}.${P}`>;
} & {
    [Q in MANDATORY & keyof TYPE]: TYPE[Q];
}>;
declare type MadatoriesInType<TYPE, MANDATORY extends string, PREFIX extends string> = {
    [P in (keyof TYPE) & string]-?: `${PREFIX}${P}` extends MANDATORY ? P : never;
}[(keyof TYPE) & string];
declare type OptionalValueSourcesInType<TYPE, MANDATORY extends string, PREFIX extends string> = {
    [P in (keyof TYPE) & string]-?: TYPE[P] extends AnyValueSource | undefined ? (`${PREFIX}${P}` extends MANDATORY ? never : P) : never;
}[(keyof TYPE) & string];
declare type NonValueSourcesInType<TYPE, MANDATORY extends string, PREFIX extends string> = {
    [P in (keyof TYPE) & string]-?: TYPE[P] extends AnyValueSource | undefined ? never : `${PREFIX}${P}` extends MANDATORY ? never : P;
}[(keyof TYPE) & string];
declare type MandatoryPaths<TYPE, PREFIX extends string> = undefined extends TYPE ? never : TYPE extends AnyValueSource ? `${PREFIX}` : PREFIX extends '' ? {
    [KEY in MandatoryPropertiesOf<TYPE> & string]: MandatoryPaths<TYPE[KEY], `${KEY}`>;
}[MandatoryPropertiesOf<TYPE> & string] : {
    [KEY in MandatoryPropertiesOf<TYPE> & string]: MandatoryPaths<TYPE[KEY], `${PREFIX}.${KEY}`>;
}[MandatoryPropertiesOf<TYPE> & string] | `${PREFIX}`;
declare type Expand<T> = T extends infer O ? {
    [K in keyof O]: O[K];
} : never;
export declare function dynamicPick<TYPE extends Pickable, MANDATORY extends MandatoryPaths<TYPE, ''> = never>(obj: TYPE, pick: DynamicPick<TYPE>, mandatory?: MANDATORY[]): PickWithMandatories<TYPE, MANDATORY, ''>;
export declare type DynamicPickPaths<TYPE extends Pickable, MANDATORY extends MandatoryPaths<TYPE, ''> = never> = Exclude<MandatoryPaths<TYPE, ''>, MANDATORY>;
export declare function dynamicPickPaths<TYPE extends Pickable, MANDATORY extends MandatoryPaths<TYPE, ''> = never>(obj: TYPE, pick: DynamicPickPaths<TYPE>[], mandatory?: MANDATORY[]): PickWithMandatories<TYPE, MANDATORY, ''>;
export declare function expandTypeFromDynamicPickPaths<TYPE extends Pickable, PICK extends DynamicPickPaths<TYPE>, RESULT extends {}>(obj: TYPE, pick: PICK[], result: RESULT): RESULT & PickPaths<SelectedValues<TYPE>, PICK, ''>;
declare type PickPaths<TYPE, MANDATORY extends string, PREFIX extends string> = {
    [Q in MANDATORY & keyof TYPE]: TYPE[Q];
} & {
    [P in Exclude<keyof TYPE & string, MANDATORY>]: PickPaths<TYPE[P], MANDATORY, `${PREFIX}.${P}`>;
};
