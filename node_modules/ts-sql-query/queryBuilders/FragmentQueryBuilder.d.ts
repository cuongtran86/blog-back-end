import type { TypeAdapter } from "../TypeAdapter";
import { Argument, AnyValueSource, OptionalType } from "../expressions/values";
import { SqlBuilder } from "../sqlBuilders/SqlBuilder";
export declare class FragmentQueryBuilder {
    __type: string;
    __adapter: TypeAdapter | undefined;
    __optionalType: OptionalType;
    constructor(type: string, optionalType: OptionalType, adapter: TypeAdapter | undefined);
    sql(sql: TemplateStringsArray, ...params: AnyValueSource[]): AnyValueSource;
}
export declare class FragmentFunctionBuilder {
    definitions: Argument<any, any, any, any>[];
    constructor(definitions: Argument<any, any, any, any>[]);
    as(impl: (...vs: AnyValueSource[]) => AnyValueSource): ((...args: any[]) => AnyValueSource);
}
export interface SqlBuilderSource {
    __sqlBuilder: SqlBuilder;
}
export declare class FragmentFunctionBuilderIfValue {
    definitions: Argument<any, any, any, any>[];
    sqlBuilderSource: SqlBuilderSource;
    constructor(sqlBuilderSource: SqlBuilderSource, definitions: Argument<any, any, any, any>[]);
    as(impl: (...vs: AnyValueSource[]) => AnyValueSource): ((...args: any[]) => AnyValueSource);
}
