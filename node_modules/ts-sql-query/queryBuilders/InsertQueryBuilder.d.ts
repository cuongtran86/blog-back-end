import { SqlBuilder, InsertData, SelectData, QueryColumns, ToSql } from "../sqlBuilders/SqlBuilder";
import { HasAddWiths, HasIsValue, ITable, ITableOrView, IWithView } from "../utils/ITableOrView";
import type { InsertExpression, ExecutableInsertExpression, ExecutableInsert, ExecutableInsertReturning, CustomizableExecutableMultipleInsert, CustomizableExecutableInsertFromSelect, /*, MissingKeysInsertExpression*/ InsertCustomization, CustomizableExecutableInsertReturningLastInsertedId, CustomizableExecutableSimpleInsert, ComposableExecutableInsert, ComposeExpression, ComposeExpressionDeletingInternalProperty, ComposeExpressionDeletingExternalProperty, ComposableCustomizableExecutableInsert, ExecutableInsertReturningLastInsertedId, InsertColumns, CustomizableExecutableInsert, OnConflictDoMultipleInsert, InsertOnConflictSetsExpression, DynamicOnConflictWhereExpression, OnConflictOnColumnWhere, CustomizableExecutableInsertFromSelectOnConflict, CustomizableExecutableSimpleInsertOnConflict, OnConflictDoSimpleInsert, CustomizableExecutableMultipleInsertOnConfict, CustomizableExecutableInsertFromSelectOnConflictOptional, CustomizableExecutableSimpleInsertOnConflictOptional, CustomizableExecutableMultipleInsertOnConfictOptional } from "../expressions/insert";
import type { Column } from "../utils/Column";
import { database, resultType, tableOrView, type } from "../utils/symbols";
import { AlwaysIfValueSource, AnyValueSource, IBooleanValueSource, IExecutableSelectQuery, IIfValueSource, IStringValueSource, ITypeSafeStringValueSource } from "../expressions/values";
import { ComposeSplitQueryBuilder } from "./ComposeSliptQueryBuilder";
import { RawFragment } from "../utils/RawFragment";
export declare class InsertQueryBuilder extends ComposeSplitQueryBuilder implements HasAddWiths, ToSql, InsertExpression<any>, ExecutableInsertReturningLastInsertedId<any, any>, ExecutableInsert<any>, ExecutableInsertExpression<any>, CustomizableExecutableMultipleInsert<any>, CustomizableExecutableInsertFromSelect<any>, CustomizableExecutableInsertReturningLastInsertedId<any, any>, CustomizableExecutableSimpleInsert<any>, /*MissingKeysInsertExpression<any, any>,*/ InsertData, ComposableExecutableInsert<any, any, any>, ComposeExpression<any, any, any, any, any, any>, ComposeExpressionDeletingInternalProperty<any, any, any, any, any, any>, ComposeExpressionDeletingExternalProperty<any, any, any, any, any, any>, ComposableCustomizableExecutableInsert<any, any, any>, ExecutableInsertReturning<any, any, any>, ExecutableInsert<any>, CustomizableExecutableInsert<any>, OnConflictDoMultipleInsert<any>, InsertOnConflictSetsExpression<any, any, any>, DynamicOnConflictWhereExpression<any, any>, OnConflictOnColumnWhere<any, any>, CustomizableExecutableInsertFromSelectOnConflict<any>, CustomizableExecutableSimpleInsertOnConflict<any>, OnConflictDoSimpleInsert<any>, CustomizableExecutableMultipleInsertOnConfict<any>, CustomizableExecutableInsertFromSelectOnConflictOptional<any>, CustomizableExecutableSimpleInsertOnConflictOptional<any>, CustomizableExecutableMultipleInsertOnConfictOptional<any> {
    [type]: any;
    [database]: any;
    [tableOrView]: any;
    [resultType]: any;
    __table: ITable<any>;
    __sets: {
        [property: string]: any;
    };
    __multiple?: {
        [property: string]: any;
    }[];
    __isMultiple: boolean;
    __idColumn?: Column;
    __from?: SelectData;
    __withs: Array<IWithView<any>>;
    __customization?: InsertCustomization<any>;
    __columns?: QueryColumns;
    __onConflictOnConstraint?: string | IStringValueSource<any, any> | ITypeSafeStringValueSource<any, any> | RawFragment<any>;
    __onConflictOnColumns?: AnyValueSource[];
    __onConflictOnColumnsWhere?: AlwaysIfValueSource<any, any>;
    __onConflictDoNothing?: boolean;
    __onConflictUpdateSets?: {
        [property: string]: any;
    };
    __onConflictUpdateWhere?: AlwaysIfValueSource<any, any>;
    __valuesForInsert?: ITableOrView<any>;
    __oneColumn?: boolean;
    __query: string;
    __params: any[];
    constructor(sqlBuilder: SqlBuilder, table: ITable<any>);
    executeInsert(min?: number, max?: number): Promise<any>;
    executeInsertNoneOrOne(): Promise<any>;
    executeInsertOne(): Promise<any>;
    executeInsertMany(min?: number, max?: number): Promise<any>;
    query(): string;
    params(): any[];
    __toSql(_sqlBuilder: SqlBuilder, params: any[]): string;
    __toSqlForCondition(sqlBuilder: SqlBuilder, params: any[]): string;
    dynamicSet(): any;
    set(columns: any): this;
    setIfValue(columns: any): this;
    setIfSet(columns: any): this;
    setIfSetIfValue(columns: any): this;
    setIfNotSet(columns: any): this;
    setIfNotSetIfValue(columns: any): this;
    ignoreIfSet(...columns: any[]): this;
    setIfHasValue(columns: any): this;
    setIfHasValueIfValue(columns: any): this;
    setIfHasNoValue(columns: any): this;
    setIfHasNoValueIfValue(columns: any): this;
    ignoreIfHasValue(...columns: any[]): this;
    ignoreIfHasNoValue(...columns: any[]): this;
    ignoreAnySetWithNoValue(): this;
    values(columns: any): this;
    from(select: IExecutableSelectQuery<any, any, any, any>): this;
    customizeQuery(customization: InsertCustomization<any>): this;
    defaultValues(): this;
    returningLastInsertedId(): this;
    returning(columns: InsertColumns<any>): this;
    returningOneColumn(column: AnyValueSource): this;
    onConflictDoNothing(): this;
    onConflictDoUpdateDynamicSet(): any;
    onConflictDoUpdateSet(columns: any): any;
    onConflictDoUpdateSetIfValue(columns: any): any;
    onConflictOn(...columns: AnyValueSource[]): this;
    onConflictOnConstraint(constraint: string | IStringValueSource<any, any> | ITypeSafeStringValueSource<any, any> | RawFragment<any>): this;
    doNothing(): this;
    doUpdateDynamicSet(): any;
    doUpdateSet(columns: any): any;
    doUpdateSetIfValue(columns: any): any;
    dynamicWhere(): this;
    where(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    and(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    or(condition: IBooleanValueSource<any, any> | IIfValueSource<any, any>): this;
    __addWiths(sqlBuilder: HasIsValue, withs: Array<IWithView<any>>): void;
    __registerTableOrView(_sqlBuilder: HasIsValue, _requiredTablesOrViews: Set<ITableOrView<any>>): void;
    __registerRequiredColumn(_sqlBuilder: HasIsValue, _requiredColumns: Set<Column>, _onlyForTablesOrViews: Set<ITableOrView<any>>): void;
    __getOldValues(_sqlBuilder: HasIsValue): ITableOrView<any> | undefined;
    __getValuesForInsert(_sqlBuilder: HasIsValue): ITableOrView<any> | undefined;
    __isAllowed(sqlBuilder: HasIsValue): boolean;
}
